#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

class Solution {
public:
    long long minimumTotalDistance(vector<int>& robots, vector<vector<int>>& factories) {
        // Sort robots and factories by positions
        sort(robots.begin(), robots.end());
        sort(factories.begin(), factories.end());

        int n = robots.size();
        int m = factories.size();
        
        // Initialize DP array with infinity
        vector<vector<long long>> dp(n + 1, vector<long long>(m + 1, LLONG_MAX));
        
        // Base case: no robots, no distance
        dp[0][0] = 0;

        // Fill the DP table
        for (int j = 1; j <= m; ++j) {
            for (int i = 0; i <= n; ++i) {
                // Assign up to `factories[j-1][1]` robots to factory `j-1`
                long long totalDistance = 0;
                for (int k = 0; k <= factories[j - 1][1] && i - k >= 0; ++k) {
                    // Calculate distance for the k-th robot to factory
                    if (k > 0) {
                        totalDistance += abs(robots[i - k] - factories[j - 1][0]);
                    }
                    // Update DP value for this configuration
                    if (dp[i - k][j - 1] != LLONG_MAX) {
                        dp[i][j] = min(dp[i][j], dp[i - k][j - 1] + totalDistance);
                    }
                }
            }
        }
        
        // The result is the minimum distance for all robots with all factories
        return dp[n][m];
    }
};
