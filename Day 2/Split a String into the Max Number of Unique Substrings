class Solution {
public:
    int maxUniqueSplit(string s) {
        unordered_set<string> uniqueParts;
        return backtrack(s, 0, uniqueParts);
    }

private:
    int backtrack(const string& s, int start, unordered_set<string>& uniqueParts) {
        // If we have reached the end of the string, return 0 (no more splits possible)
        if (start == s.size()) return 0;
        
        int maxSplit = 0;
        string current = "";
        // Try all possible substrings starting from 'start'
        for (int i = start; i < s.size(); ++i) {
            current += s[i];
            // If the current substring is not already used, try including it
            if (uniqueParts.find(current) == uniqueParts.end()) {
                uniqueParts.insert(current);
                // Recur for the remaining string and update maxSplit
                maxSplit = max(maxSplit, 1 + backtrack(s, i + 1, uniqueParts));
                // Backtrack: remove the current substring from the set
                uniqueParts.erase(current);
            }
        }
        return maxSplit;
    }
};
