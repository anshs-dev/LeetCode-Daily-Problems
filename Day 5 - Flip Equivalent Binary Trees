/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        // Base cases
        if (root1 == nullptr && root2 == nullptr) return true; // Both are null
        if (root1 == nullptr || root2 == nullptr) return false; // One is null, the other isn't
        if (root1->val != root2->val) return false; // Different values, not equivalent

        // Recursively check both flip scenarios:
        // 1. No flip: left subtree matches left subtree, right matches right
        // 2. Flip: left subtree matches right subtree, right matches left
        bool withoutFlip = flipEquiv(root1->left, root2->left) && flipEquiv(root1->right, root2->right);
        bool withFlip = flipEquiv(root1->left, root2->right) && flipEquiv(root1->right, root2->left);

        // Return true if either scenario is true
        return withoutFlip || withFlip;
    }
};
